# Specify the version of the Docker Compose file format
version: '3.8'

# Define the services that will run in your application
services:

  # Configuration for the MySQL database service
  database:
    # Use the MySQL 8 Docker image
    image: mysql:8
    environment:
      # Set the root password for MySQL
      MYSQL_ROOT_PASSWORD: password
      # Specify the name of the database to be created
      MYSQL_DATABASE: product
      # Specify the MySQL user and its password
      MYSQL_USER: product
      MYSQL_PASSWORD: password
    volumes:
      # Mount a volume to persist MySQL data
      - database_volumes:/var/lib/mysql
    healthcheck:
      test: mysqladmin ping -h 127.0.0.1 -u $$MYSQL_USER --password=$$MYSQL_PASSWORD
      interval: 1s
      timeout: 20s
      retries: 10
      start_period: 10s

  # Configuration for the server application
  server:
    # Build the server image using the Dockerfile in the ./server directory
    build:
      context: .apps/docker/backend
    # Expose port 8080 on the host and map it to port 8080 in the container
    ports:
      - "8080:8080"
    environment:
      # Set the Spring DataSource URL to connect to the MySQL database service
      SPRING_DATASOURCE_URL: jdbc:mysql://database:3306/product
      # Set the username for connecting to the MySQL database
      SPRING_DATASOURCE_USERNAME: product
      # Set the password for connecting to the MySQL database
      SPRING_DATASOURCE_PASSWORD: password
    # volumes:
    #   - ./backend:/var/lib/mybackend
    # Depend on the database service, ensuring it starts before the server
    depends_on:
      database:
        condition: service_healthy
        restart: true
     
      
  # Configuration for the client application
  client:
    volumes:
      - ./frontend:/var/lib/myfrontend
    # Build the client image using the Dockerfile in the ./client directory
    build:
      context: .apps/docker/frontend
    # Expose port 3000 on the host and map it to port 5173 in the container
    ports:
      - "3000:3000"
    # Depend on the server service, ensuring it starts before the client
    depends_on:
      - server

  # nginx:
  #   build: 
  #     context: ./docker/nginx
  #   ports:
  #     - "80:80"
  #   volumes:
  #     - ./frontend:/client_volumes
  #     - ./backend:/server_volumes
  #   depends_on:
  #     - server
  #     - client
  #     - database
# Define a volume named mysql_data for persisting MySQL data
volumes:
  database_volumes:
  server_volumes:
  client_volumes: